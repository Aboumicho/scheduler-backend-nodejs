name: CICD

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
      - name: Build docker image
        run: docker build -t aboumicho/scheduler-backend-nodejs .
      - name: Publish image to docker hub
        run: docker push aboumicho/scheduler-backend-nodejs:latest
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Launch EC2 instance
        id: ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0ca2e925753ca2fb4 --count 1 --instance-type t2.micro --key-name keypair --security-group-ids sg-05c43919e1d6449d8 --query 'Instances[0].InstanceId' --output text)
          echo "::set-output name=instance_id::$INSTANCE_ID"

      - name: Wait for EC2 instance to be in running state
        run: |
          aws ec2 wait instance-running --instance-ids ${{ steps.ec2.outputs.instance_id }}

      - name: Get EC2 instance public DNS
        id: dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo "::set-output name=public_dns::$PUBLIC_DNS"

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: SSH into EC2 and deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
            docker pull aboumicho/scheduler-backend-nodejs:latest
            docker rm -f scheduler-backend-nodejs-container || true
            docker run -d -p 5000:5000 --name scheduler-backend-nodejs-container aboumicho/scheduler-backend-nodejs
          EOF

      - name: Terminate EC2 instance
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.ec2.outputs.instance_id }}
        